{
  "menu": {
    "launchModel": "Launch Model",
    "runningModels": "Running Models",
    "registerModel": "Register Model",
    "clusterInfo": "Cluster Information",
    "contactUs": "Contact Us"
  },

  "model": {
    "languageModels": "Language Models",
    "embeddingModels": "Embedding Models",
    "rerankModels": "Rerank Models",
    "imageModels": "Image Models",
    "audioModels": "Audio Models",
    "videoModels": "Video Models",
    "customModels": "Custom Models",
    "flexibleModels": "Flexible Models"
  },

  "launchModel": {
    "modelAbility": "Model Ability",
    "generate": "generate",
    "chat": "chat",
    "vision": "vl-chat",
    "status": "Status",
    "cached": "Cached",
    "manageCachedModels": "Manage Cached Models",
    "favorite": "Favorite",
    "unfavorite": "Unfavorite",
    "search": "Search for model name and description",
    "searchModelType": "Search for {{modelType}} model name",
    "searchInstruction": "Type {{hotkey}} to search",
    "clickToLaunchModel": "Click with mouse to launch the model",
    "dimensions": "dimensions",
    "maxTokens": "max tokens",
    "edit": "Edit",
    "delete": "Delete",
    "contextLength": "context length",
    "chatModel": "chat model",
    "generateModel": "generate model",
    "otherModel": "other model",
    "confirmDeleteCustomModel": "Are you sure to delete this custom model? This behavior is irreversible.",
    "lastConfig": "Last Config",
    "commandLineParsing": "Command Line Argument Parsing",
    "copyToCommandLine": "Copy as Command Line Command",
    "modelEngine": "Model Engine",
    "modelFormat": "Model Format",
    "modelSize": "Model Size",
    "quantization": "Quantization",
    "nGPU": "GPU Count",
    "nGPUPerWorker": "GPU Count Per Worker",
    "nGpuLayers": "N GPU Layers",
    "replica": "Replica",
    "optionalConfigurations": "Optional Configurations",
    "modelUID.optional": "(Optional) Model UID, model name by default",
    "requestLimits.optional": "(Optional) Request Limits, the number of request limits for this model, default is None",
    "workerIp.optional": "(Optional) Worker Ip, specify the worker ip where the model is located in a distributed scenario",
    "workerIp": "Worker Ip, specify the worker ip where the model is located in a distributed scenario",
    "workerCount.optional": "(Optional) Worker Count",
    "GPUIdx.optional": "(Optional) GPU Idx, Specify the GPU index where the model is located",
    "GPUIdx": "GPU Idx, Specify the GPU index where the model is located",
    "downloadHub.optional": "(Optional) Download_hub",
    "modelPath.optional": "(Optional) Model Path, For PyTorch, provide the model directory. For GGML/GGUF, provide the model file path.",
    "GGUFQuantization.optional": "(Optional) GGUF quantization format, quantizing the Transformer part.",
    "GGUFModelPath.optional": "(Optional) GGUF model path, should be a file ending with .gguf.",
    "CPUOffload": "CPU Offload",
    "CPUOffload.tip": "Unload the model to the CPU. Recommend to enable this when resources are limited or when using the GGUF option.",
    "loraConfig": "Lora Config",
    "loraModelConfig": "Lora Model Config",
    "additionalParametersForInferenceEngine": "Additional parameters passed to the inference engine",
    "enterIntegerGreaterThanZero": "Please enter an integer greater than 0.",
    "enterCommaSeparatedNumbers": "Please enter numeric data separated by commas, for example: 0,1,2",
    "device": "Device",
    "loraLoadKwargsForImageModel": "Lora Load Kwargs for Image Model",
    "loraFuseKwargsForImageModel": "Lora Fuse Kwargs for Image Model",
    "launch": "Launch",
    "goBack": "Go Back",
    "copyJson": "Copy Json",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "placeholderTip": "Please enter",
    "fillCompleteParametersBeforeAdding": "Please fill in the complete parameters before adding!",
    "model_format": "model_format",
    "model_size_in_billions": "model_size_in_billions",
    "quantizations": "quantizations",
    "real_path": "real_path",
    "path": "path",
    "ipAddress": "IP Address",
    "operation": "operation",
    "copyRealPath": "Copy real_path",
    "copyPath": "Copy path",
    "noCacheForNow": "No cache for now!",
    "confirmDeleteCacheFiles": "Confirm deletion of cache files? This action is irreversible.",
    "commandLineTip": "Please confirm whether the model names are consistent.",
    "featured": "featured",
    "all": "all"
  },

  "runningModels": {
    "name": "Name",
    "address": "Address",
    "gpuIndexes": "GPU Indexes",
    "size": "Size",
    "quantization": "Quantization",
    "replica": "Replica",
    "actions": "Actions",
    "noRunningModels": "No Running Models",
    "noRunningModelsMatches": "No Running Models Matches"
  },

  "registerModel": {
    "modelName": "Model Name",
    "modelDescription": "Model Description (Optional)",
    "contextLength": "Context Length",
    "dimensions": "Dimensions",
    "maxTokens": "Max Tokens",
    "modelPath": "Model Path",
    "modelLanguages": "Model Languages",
    "languages": "Languages",
    "multilingual": "Multilingual",
    "modelAbilities": "Model Abilities",
    "modelFamily": "Model Family",
    "chatTemplate": "Chat Template",
    "test": "test",
    "testResult": "test result",
    "noTestResults": "No test results...",
    "stopTokenIds": "Stop Token Ids",
    "stop": "Stop",
    "launcher": "Launcher",
    "launcherArguments": "Launcher Arguments (Optional)",
    "edit": "Edit",
    "cancel": "Cancel",
    "registerModel": "Register Model",
    "messagesExample": "Messages Example",
    "JSONFormat": "JSON Format",
    "modelSpecs": "Model Specs",
    "modelSizeBillions": "Model Size in Billions",
    "quantization": "Quantization",
    "quantizationOptional": "Quantization (Optional)",
    "delete": "Delete",
    "controlnet": "Controlnet",
    "more": "more",
    "modelFormat": "Model Format",
    "enterNumberGreaterThanZero": "Please enter a number greater than 0.",
    "carefulQuantizationForModelRegistration": "For GPTQ/AWQ/FP8/MLX models, please be careful to fill in the quantization corresponding to the model you want to register.",
    "quantizationCannotBeEmpty": "Quantization cannot be left empty.",
    "enterInteger": "Please enter an integer.",
    "enterIntegerGreaterThanZero": "Please enter an integer greater than 0.",
    "showCustomJsonConfig": "Show custom json config used by api",
    "packUp": "Pack up",
    "unfold": "Unfold",
    "copyAll": "Copy all",
    "alphanumericWithHyphensUnderscores": "Alphanumeric characters with properly placed hyphens and underscores. Must not match any built-in model names.",
    "chooseBuiltInOrCustomModel": "You can choose from the built-in models or input your own.",
    "chooseOnlyBuiltInModel": "You can only choose from the built-in models.",
    "provideModelDirectoryPath": "Provide the model directory path.",
    "provideModelLauncher": "Provide the model launcher.",
    "jsonArgumentsForLauncher": "A JSON-formatted dictionary representing the arguments passed to the Launcher.",
    "provideModelDirectoryOrFilePath": "For PyTorch, provide the model directory. For GGUF, provide the model file path.",
    "ensureChatTemplatePassesTest": "Please make sure this chat_template passes the test by clicking the TEST button on the right. Please note that this test may not cover all cases and will only be used for the most basic case.",
    "testFailurePreventsChatWorking": "Please note that failure to pass test may prevent chats from working properly.",
    "stopControlForChatModels": "int type, used to control the stopping of chat models",
    "stopControlStringForChatModels": "string type, used to control the stopping of chat models",
    "enterJsonFormattedDictionary": "Please enter the JSON-formatted dictionary."
  },

  "clusterInfo": {
    "supervisor": "Supervisor",
    "workers": "Workers",
    "workerDetails": "Worker Details",
    "count": "Count",
    "cpuInfo": "CPU Info",
    "usage": "Usage:",
    "total": "Total",
    "cpuMemoryInfo": "CPU Memory Info",
    "version": "Version",
    "release": "Release:",
    "commit": "Commit:",
    "gpuInfo": "GPU Info",
    "gpuMemoryInfo": "GPU Memory Info",
    "address": "Address",
    "item": "Item",
    "value": "Value",
    "nodeType": "Node Type",
    "cpuUsage": "CPU Usage",
    "cpuTotal": "CPU Total",
    "memUsage": "Mem Usage",
    "memTotal": "Mem Total",
    "gpuCount": "GPU Count",
    "gpuMemUsage": "GPU Mem Usage",
    "gpuMemTotal": "GPU Mem Total",
    "worker": "Worker"
  },

  "components": {
    "copySuccess": "Copied to clipboard!"
  }
}
